import os
import logging
import sqlite3
import json
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler

# ÿ•ÿπÿØÿßÿØ ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class Database:
    def __init__(self):
        self.conn = sqlite3.connect('content_bot.db', check_same_thread=False)
        self.create_tables()
        self.create_admin()
        self.create_default_settings()

    def create_tables(self):
        # ÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                is_approved INTEGER DEFAULT 0,
                is_admin INTEGER DEFAULT 0,
                is_premium INTEGER DEFAULT 0,
                joined_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # ÿ¨ÿØŸàŸÑ ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE,
                is_premium INTEGER DEFAULT 0,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # ÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS content (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT,
                content TEXT,
                content_type TEXT,
                category_id INTEGER,
                is_premium INTEGER DEFAULT 0,
                file_id TEXT,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # ÿ¨ÿØŸàŸÑ ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS join_requests (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # ÿ¨ÿØŸàŸÑ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS bot_settings (
                key TEXT PRIMARY KEY,
                value TEXT
            )
        ''')
        self.conn.commit()

    def create_admin(self):
        admin_id = int(os.getenv('ADMIN_ID', 123456789))
        self.conn.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, is_approved, is_admin, is_premium)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (admin_id, 'admin', 'Admin', 'Bot', 1, 1, 1))
        self.conn.commit()

    def create_default_settings(self):
        default_settings = [
            ('welcome_message', 'üé≠ ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä ÿ®Ÿàÿ™ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÖŸÖŸäÿ≤!'),
            ('approval_required', '1'),
            ('about_text', 'ü§ñ ÿ®Ÿàÿ™ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿ™ŸÅÿßÿπŸÑŸä\n\nÿ®Ÿàÿ™ ŸÖÿ™ÿÆÿµÿµ ŸÑŸÖÿ¥ÿßÿ±ŸÉÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÖŸÖŸäÿ≤.'),
            ('contact_text', 'üìû ŸÑŸÑÿ™ŸàÿßÿµŸÑ: @username'),
            ('start_button_text', 'üöÄ ÿßÿ®ÿØÿ£ ÿßŸÑÿ±ÿ≠ŸÑÿ©'),
            ('auto_approve', '0'),
            ('premium_enabled', '1'),
            ('premium_section_name', 'üëë ŸÇÿ≥ŸÖ ÿßŸÑŸÖŸÖŸäÿ≤'),
            ('premium_access_message', 'üîí Ÿáÿ∞ÿß ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ŸÖÿ™ÿßÿ≠ ŸÑŸÑÿ£ÿπÿ∂ÿßÿ° ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ ŸÅŸÇÿ∑.\n\nüíé ŸÑÿ™ÿ±ŸÇŸäÿ© ÿ≠ÿ≥ÿßÿ®ŸÉÿå ÿ™ŸàÿßÿµŸÑ ŸÖÿπ ÿßŸÑÿ•ÿØÿßÿ±ÿ©.'),
            ('broadcast_notification_text', 'üì¢ ÿ•ÿ¥ÿπÿßÿ± ŸÖŸÜ ÿßŸÑÿ•ÿØÿßÿ±ÿ©'),
            ('admin_contact', '@username')
        ]
        for key, value in default_settings:
            self.conn.execute('INSERT OR IGNORE INTO bot_settings (key, value) VALUES (?, ?)', (key, value))
        self.conn.commit()

    def get_setting(self, key):
        cursor = self.conn.execute('SELECT value FROM bot_settings WHERE key = ?', (key,))
        result = cursor.fetchone()
        return result[0] if result else None

    def update_setting(self, key, value):
        self.conn.execute('UPDATE bot_settings SET value = ? WHERE key = ?', (value, key))
        self.conn.commit()

    def get_all_settings(self):
        cursor = self.conn.execute('SELECT * FROM bot_settings')
        return cursor.fetchall()

    def add_user(self, user_id, username, first_name, last_name, is_approved=False, is_admin=False):
        self.conn.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, is_approved, is_admin, last_active)
            VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
        ''', (user_id, username, first_name, last_name, is_approved, is_admin))
        self.conn.commit()

    def update_user_activity(self, user_id):
        self.conn.execute('UPDATE users SET last_active = CURRENT_TIMESTAMP WHERE user_id = ?', (user_id,))
        self.conn.commit()

    def get_user(self, user_id):
        cursor = self.conn.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        return cursor.fetchone()

    def approve_user(self, user_id):
        self.conn.execute('UPDATE users SET is_approved = 1 WHERE user_id = ?', (user_id,))
        self.conn.execute('DELETE FROM join_requests WHERE user_id = ?', (user_id,))
        self.conn.commit()

    def reject_user(self, user_id):
        self.conn.execute('DELETE FROM join_requests WHERE user_id = ?', (user_id,))
        self.conn.commit()

    def get_all_users(self):
        cursor = self.conn.execute('SELECT * FROM users WHERE is_approved = 1')
        return cursor.fetchall()

    def get_active_users(self, days=30):
        cutoff_date = datetime.now() - timedelta(days=days)
        cursor = self.conn.execute('''
            SELECT * FROM users 
            WHERE is_approved = 1 AND last_active > ?
        ''', (cutoff_date,))
        return cursor.fetchall()

    def get_pending_requests(self):
        cursor = self.conn.execute('SELECT * FROM join_requests')
        return cursor.fetchall()

    def delete_user(self, user_id):
        self.conn.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
        self.conn.commit()

    def make_premium(self, user_id):
        self.conn.execute('UPDATE users SET is_premium = 1 WHERE user_id = ?', (user_id,))
        self.conn.commit()

    def remove_premium(self, user_id):
        self.conn.execute('UPDATE users SET is_premium = 0 WHERE user_id = ?', (user_id,))
        self.conn.commit()

    def get_premium_users(self):
        cursor = self.conn.execute('SELECT * FROM users WHERE is_premium = 1 AND is_approved = 1')
        return cursor.fetchall()

    def add_category(self, name, is_premium=False):
        self.conn.execute('INSERT OR IGNORE INTO categories (name, is_premium) VALUES (?, ?)', 
                         (name, 1 if is_premium else 0))
        self.conn.commit()

    def get_categories(self):
        cursor = self.conn.execute('SELECT * FROM categories ORDER BY name')
        return cursor.fetchall()

    def get_normal_categories(self):
        cursor = self.conn.execute('SELECT * FROM categories WHERE is_premium = 0 ORDER BY name')
        return cursor.fetchall()

    def get_premium_categories(self):
        cursor = self.conn.execute('SELECT * FROM categories WHERE is_premium = 1 ORDER BY name')
        return cursor.fetchall()

    def update_category(self, category_id, name, is_premium):
        self.conn.execute('UPDATE categories SET name = ?, is_premium = ? WHERE id = ?', 
                         (name, is_premium, category_id))
        self.conn.commit()

    def delete_category(self, category_id):
        self.conn.execute('DELETE FROM categories WHERE id = ?', (category_id,))
        self.conn.execute('DELETE FROM content WHERE category_id = ?', (category_id,))
        self.conn.commit()

    def add_content(self, title, content, content_type, category_id, is_premium=False, file_id=None):
        self.conn.execute('''
            INSERT INTO content (title, content, content_type, category_id, is_premium, file_id) 
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (title, content, content_type, category_id, 1 if is_premium else 0, file_id))
        self.conn.commit()

    def get_content_by_category(self, category_id):
        cursor = self.conn.execute('SELECT * FROM content WHERE category_id = ? ORDER BY created_date DESC', (category_id,))
        return cursor.fetchall()

    def get_all_content(self):
        cursor = self.conn.execute('''
            SELECT c.*, cat.name as category_name 
            FROM content c JOIN categories cat ON c.category_id = cat.id 
            ORDER BY c.created_date DESC
        ''')
        return cursor.fetchall()

    def delete_content(self, content_id):
        self.conn.execute('DELETE FROM content WHERE id = ?', (content_id,))
        self.conn.commit()

    def get_content(self, content_id):
        cursor = self.conn.execute('SELECT * FROM content WHERE id = ?', (content_id,))
        return cursor.fetchone()

db = Database()

def get_admin_id():
    return int(os.getenv('ADMIN_ID', 123456789))

def is_admin(user_id):
    return user_id == get_admin_id()

def get_category_id_by_name(name):
    categories = db.get_categories()
    for cat in categories:
        if cat[1] == name:
            return cat[0]
    return None

def get_category_name_by_id(category_id):
    categories = db.get_categories()
    for cat in categories:
        if cat[0] == category_id:
            return cat[1]
    return "ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ"

# ŸÑŸàÿ≠ÿßÿ™ ÿßŸÑŸÖŸÅÿßÿ™Ÿäÿ≠ ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
def user_main_menu():
    premium_section_name = db.get_setting('premium_section_name') or 'üëë ŸÇÿ≥ŸÖ ÿßŸÑŸÖŸÖŸäÿ≤'
    keyboard = [
        [KeyboardButton("üìÅ ÿßŸÑÿßŸÇÿ≥ÿßŸÖ"), KeyboardButton(premium_section_name)],
        [KeyboardButton("üë§ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä"), KeyboardButton("‚ÑπÔ∏è ÿ≠ŸàŸÑ ÿßŸÑÿ®Ÿàÿ™")],
        [KeyboardButton("üìû ÿßÿ™ÿµŸÑ ÿ®ŸÜÿß")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def user_categories_menu():
    categories = db.get_normal_categories()
    keyboard = []
    row = []
    for i, cat in enumerate(categories):
        row.append(KeyboardButton(cat[1]))
        if len(row) == 2 or i == len(categories) - 1:
            keyboard.append(row)
            row = []
    keyboard.append([KeyboardButton("üè† ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def user_premium_categories_menu():
    categories = db.get_premium_categories()
    keyboard = []
    row = []
    for i, cat in enumerate(categories):
        row.append(KeyboardButton(cat[1]))
        if len(row) == 2 or i == len(categories) - 1:
            keyboard.append(row)
            row = []
    keyboard.append([KeyboardButton("üè† ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def user_content_menu(category_name, category_id):
    content_items = db.get_content_by_category(category_id)
    keyboard = []
    row = []
    for i, content in enumerate(content_items):
        short_title = content[1][:15] + "..." if len(content[1]) > 15 else content[1]
        row.append(KeyboardButton(f"üìÑ {short_title}"))
        if len(row) == 2 or i == len(content_items) - 1:
            keyboard.append(row)
            row = []
    keyboard.append([KeyboardButton(f"üîô ÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸâ {category_name}")])
    keyboard.append([KeyboardButton("üè† ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ŸÑŸàÿ≠ÿßÿ™ ÿßŸÑŸÖŸÅÿßÿ™Ÿäÿ≠ ŸÑŸÑŸÖÿØŸäÿ±
def admin_main_menu():
    keyboard = [
        [KeyboardButton("üë• ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ"), KeyboardButton("üìÅ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ")],
        [KeyboardButton("üì¶ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ"), KeyboardButton("‚öôÔ∏è ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ®Ÿàÿ™")],
        [KeyboardButton("üìä ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™"), KeyboardButton("üì¢ ÿßŸÑÿ®ÿ´ ÿßŸÑÿ¨ŸÖÿßÿπŸä")],
        [KeyboardButton("üéØ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ")],
        [KeyboardButton("üîô Ÿàÿ∂ÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def admin_users_menu():
    keyboard = [
        [KeyboardButton("üìã ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ"), KeyboardButton("‚è≥ ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ")],
        [KeyboardButton("üíé ÿ™ÿ±ŸÇŸäÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ"), KeyboardButton("üîª ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ™ŸÖŸäÿ≤")],
        [KeyboardButton("üóë ÿ≠ÿ∞ŸÅ ŸÖÿ≥ÿ™ÿÆÿØŸÖ"), KeyboardButton("üîô ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def admin_categories_menu():
    keyboard = [
        [KeyboardButton("‚ûï ÿ•ÿ∂ÿßŸÅÿ© ŸÇÿ≥ŸÖ"), KeyboardButton("‚úèÔ∏è ÿ™ÿπÿØŸäŸÑ ŸÇÿ≥ŸÖ")],
        [KeyboardButton("üóë ÿ≠ÿ∞ŸÅ ŸÇÿ≥ŸÖ"), KeyboardButton("üìã ÿπÿ±ÿ∂ ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ")],
        [KeyboardButton("üîß ÿ¨ÿπŸÑ ŸÇÿ≥ŸÖ ŸÖŸÖŸäÿ≤"), KeyboardButton("üîô ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def admin_content_menu():
    keyboard = [
        [KeyboardButton("‚ûï ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿ≠ÿ™ŸàŸâ"), KeyboardButton("üóë ÿ≠ÿ∞ŸÅ ŸÖÿ≠ÿ™ŸàŸâ")],
        [KeyboardButton("üìã ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ"), KeyboardButton("üîß ÿ¨ÿπŸÑ ŸÖÿ≠ÿ™ŸàŸâ ŸÖŸÖŸäÿ≤")],
        [KeyboardButton("üîô ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def admin_premium_menu():
    keyboard = [
        [KeyboardButton("üëë ÿπÿ±ÿ∂ ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ"), KeyboardButton("üíé ÿ™ÿ±ŸÇŸäÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ")],
        [KeyboardButton("üîª ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ™ŸÖŸäÿ≤"), KeyboardButton("üìä ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ")],
        [KeyboardButton("‚úèÔ∏è ÿ™ÿπÿØŸäŸÑ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ"), KeyboardButton("üîô ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def admin_settings_menu():
    keyboard = [
        [KeyboardButton("‚úèÔ∏è ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ™ÿ±ÿ≠Ÿäÿ®"), KeyboardButton("üìù ÿ≠ŸàŸÑ ÿßŸÑÿ®Ÿàÿ™")],
        [KeyboardButton("üìû ÿßÿ™ÿµŸÑ ÿ®ŸÜÿß"), KeyboardButton("üîÑ ÿ≤ÿ± ÿßŸÑÿ®ÿØÿ°")],
        [KeyboardButton("üîê ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖŸàÿßŸÅŸÇÿ©"), KeyboardButton("üéØ ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ")],
        [KeyboardButton("‚úèÔ∏è ÿßÿ≥ŸÖ ŸÇÿ≥ŸÖ ÿßŸÑŸÖŸÖŸäÿ≤"), KeyboardButton("üîô ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ŸÖÿπÿßŸÑÿ¨ÿ© START
async def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    user_id = user.id
    
    context.user_data.clear()
    db.update_user_activity(user_id)
    
    if is_admin(user_id):
        await update.message.reply_text(
            "üëë ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ÿ¢ŸÑÿ© ÿßŸÑŸÖÿØŸäÿ±!\n\nŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ© ÿ¨ÿßŸáÿ≤ÿ©.",
            reply_markup=admin_main_menu()
        )
        return
    
    db.add_user(user_id, user.username, user.first_name, user.last_name)
    
    user_data = db.get_user(user_id)
    auto_approve = db.get_setting('auto_approve') == '1'
    approval_required = db.get_setting('approval_required') == '1'
    
    if auto_approve and not user_data[4]:
        db.approve_user(user_id)
        user_data = db.get_user(user_id)
    
    if user_data and user_data[4] == 1:
        welcome_message = db.get_setting('welcome_message')
        await update.message.reply_text(
            f"{welcome_message}\n\nŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ {user.first_name}! üëã",
            reply_markup=user_main_menu()
        )
    elif not approval_required:
        db.approve_user(user_id)
        welcome_message = db.get_setting('welcome_message')
        await update.message.reply_text(
            f"{welcome_message}\n\nŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ {user.first_name}! üëã",
            reply_markup=user_main_menu()
        )
    else:
        db.conn.execute('INSERT OR REPLACE INTO join_requests (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
                       (user_id, user.username, user.first_name, user.last_name))
        db.conn.commit()
        
        admin_id = get_admin_id()
        keyboard = [
            [InlineKeyboardButton("‚úÖ ÿßŸÑŸÖŸàÿßŸÅŸÇÿ©", callback_data=f"approve_{user_id}"),
             InlineKeyboardButton("‚ùå ÿ±ŸÅÿ∂", callback_data=f"reject_{user_id}")]
        ]
        
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üì© ÿ∑ŸÑÿ® ÿßŸÜÿ∂ŸÖÿßŸÖ ÿ¨ÿØŸäÿØ:\nüë§ {user.first_name}\nüì± @{user.username or 'ŸÑÿß ŸäŸàÿ¨ÿØ'}\nüÜî {user_id}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ŸÑŸÑŸÖÿØŸäÿ±: {e}")
        
        await update.message.reply_text(
            "üìã ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ∑ŸÑÿ® ÿßŸÜÿ∂ŸÖÿßŸÖŸÉ ÿ•ŸÑŸâ ÿßŸÑŸÖÿØŸäÿ±. ÿßŸÜÿ™ÿ∏ÿ± ÿßŸÑŸÖŸàÿßŸÅŸÇÿ©.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîÑ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ≠ÿßŸÑÿ©")]], resize_keyboard=True)
        )

# ŸÖÿπÿßŸÑÿ¨ÿ© Callback ŸÑŸÑŸÖÿØŸäÿ±
async def handle_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if not is_admin(user_id):
        await query.edit_message_text("‚ùå ŸÑŸäÿ≥ ŸÑÿØŸäŸÉ ÿµŸÑÿßÿ≠Ÿäÿ©.")
        return
    
    if data.startswith('approve_'):
        target_user_id = int(data.split('_')[1])
        db.approve_user(target_user_id)
        
        try:
            await context.bot.send_message(
                chat_id=target_user_id,
                text="üéâ ÿ™ŸÖÿ™ ÿßŸÑŸÖŸàÿßŸÅŸÇÿ© ÿπŸÑŸâ ÿ∑ŸÑÿ®ŸÉ!",
                reply_markup=user_main_menu()
            )
        except Exception as e:
            logger.error(f"ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ© ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ: {e}")
        
        await query.edit_message_text(f"‚úÖ ÿ™ŸÖÿ™ ÿßŸÑŸÖŸàÿßŸÅŸÇÿ© ÿπŸÑŸâ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ {target_user_id}")
        
    elif data.startswith('reject_'):
        target_user_id = int(data.split('_')[1])
        db.reject_user(target_user_id)
        await query.edit_message_text(f"‚ùå ÿ™ŸÖ ÿ±ŸÅÿ∂ ÿ∑ŸÑÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ {target_user_id}")

# ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑŸàÿ≥ÿßÿ¶ÿ∑
async def handle_media(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    user_id = user.id
    
    if not is_admin(user_id):
        return
    
    if context.user_data.get('content_stage') == 'content':
        content_type = None
        file_id = None
        
        if update.message.photo:
            content_type = 'photo'
            file_id = update.message.photo[-1].file_id
        elif update.message.video:
            content_type = 'video'
            file_id = update.message.video.file_id
        
        if content_type and file_id:
            context.user_data['content_file_id'] = file_id
            context.user_data['content_type'] = content_type
            context.user_data['content_stage'] = 'category'
            
            categories = db.get_categories()
            keyboard = []
            for cat in categories:
                premium_status = "üëë" if cat[2] == 1 else "‚≠ê"
                keyboard.append([KeyboardButton(f"{premium_status} {cat[1]}")])
            keyboard.append([KeyboardButton("üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ")])
            
            await update.message.reply_text(
                "üìÅ ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 3 ŸÖŸÜ 3\n\nÿßÿÆÿ™ÿ± ÿßŸÑŸÇÿ≥ŸÖ ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿ•ŸÑŸäŸá:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )

# ŸÖÿπÿßŸÑÿ¨ÿ© ÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
async def handle_user_message(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    text = update.message.text
    user_id = user.id
    
    if is_admin(user_id):
        await handle_admin_message(update, context)
        return
    
    db.update_user_activity(user_id)
    user_data = db.get_user(user_id)
    
    if not user_data or user_data[4] == 0:
        if text == "üîÑ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ≠ÿßŸÑÿ©":
            user_data = db.get_user(user_id)
            if user_data and user_data[4] == 1:
                await update.message.reply_text("üéâ ÿ™ŸÖÿ™ ÿßŸÑŸÖŸàÿßŸÅŸÇÿ© ÿπŸÑŸâ ÿ∑ŸÑÿ®ŸÉ!", reply_markup=user_main_menu())
            else:
                await update.message.reply_text("‚è≥ ŸÑÿß Ÿäÿ≤ÿßŸÑ ÿ∑ŸÑÿ®ŸÉ ŸÇŸäÿØ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ©...")
        return
    
    # ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ£ŸàÿßŸÖÿ± ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
    if text == "üè† ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©":
        await update.message.reply_text("üè† ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©", reply_markup=user_main_menu())
    
    elif text == "üìÅ ÿßŸÑÿßŸÇÿ≥ÿßŸÖ":
        categories = db.get_normal_categories()
        if categories:
            await update.message.reply_text("üìÅ ÿßŸÑÿßŸÇÿ≥ÿßŸÖ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©:\n\nÿßÿÆÿ™ÿ± ŸÇÿ≥ŸÖ:", reply_markup=user_categories_menu())
        else:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ£ŸÇÿ≥ÿßŸÖ ŸÖÿ™ÿßÿ≠ÿ© ÿ≠ÿßŸÑŸäÿßŸã.")
    
    elif text == db.get_setting('premium_section_name') or text == "üëë ŸÇÿ≥ŸÖ ÿßŸÑŸÖŸÖŸäÿ≤":
        if user_data[6] == 1:
            categories = db.get_premium_categories()
            if categories:
                await update.message.reply_text("üëë ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ ÿßŸÑŸÖŸÖŸäÿ≤ÿ©:\n\nÿßÿÆÿ™ÿ± ŸÇÿ≥ŸÖ:", reply_markup=user_premium_categories_menu())
            else:
                await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ£ŸÇÿ≥ÿßŸÖ ŸÖŸÖŸäÿ≤ÿ© ÿ≠ÿßŸÑŸäÿßŸã.")
        else:
            premium_message = db.get_setting('premium_access_message')
            await update.message.reply_text(premium_message)
    
    elif text == "üë§ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä":
        user_stats = f"üë§ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä\n\n"
        user_stats += f"üÜî ÿßŸÑÿ±ŸÇŸÖ: {user_id}\n"
        user_stats += f"üë§ ÿßŸÑÿßÿ≥ŸÖ: {user.first_name}\n"
        user_stats += f"üìÖ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ: {user_data[7].split()[0] if user_data[7] else 'ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ'}\n"
        user_stats += f"üíé ÿßŸÑÿπÿ∂ŸàŸäÿ©: {'ŸÖŸÖŸäÿ≤ üëë' if user_data[6] == 1 else 'ÿπÿßÿØŸä ‚≠ê'}\n"
        
        if user_data[6] == 0:
            user_stats += f"\nüí° ŸÑÿ™ÿ±ŸÇŸäÿ© ÿ≠ÿ≥ÿßÿ®ŸÉ ÿ•ŸÑŸâ ŸÖŸÖŸäÿ≤ÿå ÿ™ŸàÿßÿµŸÑ ŸÖÿπ: {db.get_setting('admin_contact')}"
        
        await update.message.reply_text(user_stats)
    
    elif text == "‚ÑπÔ∏è ÿ≠ŸàŸÑ ÿßŸÑÿ®Ÿàÿ™":
        about_text = db.get_setting('about_text')
        await update.message.reply_text(about_text)
    
    elif text == "üìû ÿßÿ™ÿµŸÑ ÿ®ŸÜÿß":
        contact_text = db.get_setting('contact_text')
        await update.message.reply_text(contact_text)
    
    elif text.startswith("üîô ÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸâ "):
        category_name = text[13:]
        category_id = get_category_id_by_name(category_name)
        if category_id:
            content_items = db.get_content_by_category(category_id)
            if content_items:
                await update.message.reply_text(
                    f"üìÅ ŸÇÿ≥ŸÖ: {category_name}\n\nÿßÿÆÿ™ÿ± ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ:",
                    reply_markup=user_content_menu(category_name, category_id)
                )
            else:
                await update.message.reply_text(f"‚ö†Ô∏è ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≠ÿ™ŸàŸâ ŸÅŸä ŸÇÿ≥ŸÖ {category_name}.")
        else:
            await update.message.reply_text("üè† ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©", reply_markup=user_main_menu())
    
    else:
        # ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÜÿµ ŸáŸà ÿßÿ≥ŸÖ ŸÇÿ≥ŸÖ
        category_id = get_category_id_by_name(text)
        if category_id:
            category_data = next((cat for cat in db.get_categories() if cat[0] == category_id), None)
            if category_data:
                if category_data[2] == 1 and user_data[6] == 0:
                    premium_message = db.get_setting('premium_access_message')
                    await update.message.reply_text(premium_message)
                    return
                
                content_items = db.get_content_by_category(category_id)
                if content_items:
                    await update.message.reply_text(
                        f"üìÅ ŸÇÿ≥ŸÖ: {text}\n\nÿßÿÆÿ™ÿ± ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ:",
                        reply_markup=user_content_menu(text, category_id)
                    )
                else:
                    await update.message.reply_text(f"‚ö†Ô∏è ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≠ÿ™ŸàŸâ ŸÅŸä ŸÇÿ≥ŸÖ {text}.")
            return
        
        # ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÜÿµ ŸáŸà ÿπŸÜŸàÿßŸÜ ŸÖÿ≠ÿ™ŸàŸâ
        if text.startswith("üìÑ "):
            content_title = text[2:]
            all_content = db.get_all_content()
            for content in all_content:
                if content[1].startswith(content_title):
                    if content[5] == 1 and user_data[6] == 0:
                        premium_message = db.get_setting('premium_access_message')
                        await update.message.reply_text(premium_message)
                        return
                    
                    if content[3] == 'text':
                        await update.message.reply_text(
                            f"üìñ {content[1]}\n\n{content[2]}\n\n---\nŸÜŸáÿßŸäÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ üìö"
                        )
                    elif content[3] == 'photo' and content[6]:
                        await update.message.reply_photo(
                            photo=content[6],
                            caption=f"üì∏ {content[1]}\n\n{content[2]}"
                        )
                    elif content[3] == 'video' and content[6]:
                        await update.message.reply_video(
                            video=content[6],
                            caption=f"üé• {content[1]}\n\n{content[2]}"
                        )
                    else:
                        await update.message.reply_text(
                            f"üìñ {content[1]}\n\n{content[2]}\n\n---\nŸÜŸáÿßŸäÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ üìö"
                        )
                    return
        
        await update.message.reply_text("‚ùå ŸÑŸÖ ÿ£ŸÅŸáŸÖ ÿ∑ŸÑÿ®ŸÉ.", reply_markup=user_main_menu())

# ŸÖÿπÿßŸÑÿ¨ÿ© ÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑŸÖÿØŸäÿ± - ÿ™ŸÖ ÿ•ÿµŸÑÿßÿ≠ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ¥ÿßŸÉŸÑ
async def handle_admin_message(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    text = update.message.text
    user_id = user.id
    
    if not is_admin(user_id):
        return

    db.update_user_activity(user_id)

    # ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑÿ≠ÿßŸÑÿßÿ™ ÿπŸÜÿØ ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ
    if text in ["üîô ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ", "üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ", "üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ", "üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ"]:
        context.user_data.clear()

    if text == "üîô Ÿàÿ∂ÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ":
        context.user_data.clear()
        await update.message.reply_text("ÿ™ŸÖ ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ÿ•ŸÑŸâ Ÿàÿ∂ÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ", reply_markup=user_main_menu())
        return
    
    elif text == "üë• ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ":
        await update.message.reply_text("üë• ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ", reply_markup=admin_users_menu())
        return
    
    elif text == "üìÅ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ":
        await update.message.reply_text("üìÅ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ", reply_markup=admin_categories_menu())
        return
    
    elif text == "üì¶ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ":
        await update.message.reply_text("üì¶ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ", reply_markup=admin_content_menu())
        return
    
    elif text == "üéØ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ":
        await update.message.reply_text("üéØ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ", reply_markup=admin_premium_menu())
        return
    
    elif text == "‚öôÔ∏è ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ®Ÿàÿ™":
        await update.message.reply_text("‚öôÔ∏è ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ®Ÿàÿ™", reply_markup=admin_settings_menu())
        return
    
    elif text == "üìä ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™":
        await show_statistics(update, context)
        return
    
    elif text == "üì¢ ÿßŸÑÿ®ÿ´ ÿßŸÑÿ¨ŸÖÿßÿπŸä":
        await update.message.reply_text("ÿ£ÿ±ÿ≥ŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ŸÑŸÑÿ®ÿ´ ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ:")
        context.user_data['broadcasting'] = True
        return
    
    # ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
    elif text == "üìã ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ":
        users = db.get_all_users()
        if users:
            users_text = "üë• ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸàŸÜ:\n\n"
            for user_data in users:
                status = "üëë" if user_data[6] == 1 else "‚≠ê"
                users_text += f"{status} {user_data[0]} - {user_data[2]}\n"
            await update.message.reply_text(users_text)
        else:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ.")
        return
    
    elif text == "‚è≥ ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ":
        requests = db.get_pending_requests()
        if requests:
            req_text = "üì© ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ:\n\n"
            for req in requests:
                req_text += f"üÜî {req[0]} - üë§ {req[2]} - üì± @{req[1] or 'ŸÑÿß ŸäŸàÿ¨ÿØ'}\n"
            await update.message.reply_text(req_text)
        else:
            await update.message.reply_text("‚úÖ ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ±.")
        return
    
    elif text == "üíé ÿ™ÿ±ŸÇŸäÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ":
        await update.message.reply_text("ÿ£ÿ±ÿ≥ŸÑ ID ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÑŸÑÿ™ÿ±ŸÇŸäÿ©:")
        context.user_data['awaiting_premium_user'] = True
        return
    
    elif text == "üîª ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ™ŸÖŸäÿ≤":
        premium_users = db.get_premium_users()
        if premium_users:
            users_text = "üëë ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸàŸÜ ÿßŸÑŸÖŸÖŸäÿ≤ŸàŸÜ:\n\n"
            for user_data in premium_users:
                users_text += f"{user_data[0]} - {user_data[2]}\n"
            users_text += "\nÿ£ÿ±ÿ≥ŸÑ ID ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÑÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ™ŸÖŸäÿ≤:"
            await update.message.reply_text(users_text)
            context.user_data['awaiting_remove_premium'] = True
        else:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ŸÖŸÖŸäÿ≤ŸäŸÜ.")
        return
    
    elif text == "üóë ÿ≠ÿ∞ŸÅ ŸÖÿ≥ÿ™ÿÆÿØŸÖ":
        await update.message.reply_text("ÿ£ÿ±ÿ≥ŸÑ ID ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÑŸÑÿ≠ÿ∞ŸÅ:")
        context.user_data['awaiting_user_delete'] = True
        return
    
    # ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ - ÿ™ŸÖ ÿ•ÿµŸÑÿßÿ≠ ÿßŸÑÿ≠ÿ∞ŸÅ
    elif text == "‚ûï ÿ•ÿ∂ÿßŸÅÿ© ŸÇÿ≥ŸÖ":
        await update.message.reply_text("ÿ£ÿ±ÿ≥ŸÑ ÿßÿ≥ŸÖ ÿßŸÑŸÇÿ≥ŸÖ ÿßŸÑÿ¨ÿØŸäÿØ:")
        context.user_data['adding_category'] = True
        return
    
    elif text == "‚úèÔ∏è ÿ™ÿπÿØŸäŸÑ ŸÇÿ≥ŸÖ":
        categories = db.get_categories()
        if categories:
            keyboard = []
            for cat in categories:
                keyboard.append([KeyboardButton(f"ÿ™ÿπÿØŸäŸÑ {cat[1]}")])
            keyboard.append([KeyboardButton("üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ")])
            await update.message.reply_text("ÿßÿÆÿ™ÿ± ŸÇÿ≥ŸÖ ŸÑŸÑÿ™ÿπÿØŸäŸÑ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        else:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ£ŸÇÿ≥ÿßŸÖ.")
        return
    
    elif text.startswith("ÿ™ÿπÿØŸäŸÑ "):
        category_name = text[6:]
        category_id = get_category_id_by_name(category_name)
        if category_id:
            context.user_data['editing_category_id'] = category_id
            context.user_data['editing_category_name'] = category_name
            await update.message.reply_text(f"‚úèÔ∏è ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÇÿ≥ŸÖ: {category_name}\n\nÿ£ÿ±ÿ≥ŸÑ ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿ¨ÿØŸäÿØ ŸÑŸÑŸÇÿ≥ŸÖ:")
            context.user_data['awaiting_new_category_name'] = True
        else:
            await update.message.reply_text("‚ùå ŸÇÿ≥ŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ")
        return
    
    elif text == "üìã ÿπÿ±ÿ∂ ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ":
        categories = db.get_categories()
        if categories:
            cats_text = "üìÅ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ:\n\n"
            for cat in categories:
                premium_status = "üëë" if cat[2] == 1 else "‚≠ê"
                cats_text += f"{premium_status} {cat[1]} (ID: {cat[0]})\n"
            await update.message.reply_text(cats_text)
        else:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ£ŸÇÿ≥ÿßŸÖ.")
        return
    
    elif text == "üîß ÿ¨ÿπŸÑ ŸÇÿ≥ŸÖ ŸÖŸÖŸäÿ≤":
        categories = db.get_normal_categories()
        if categories:
            keyboard = []
            for cat in categories:
                keyboard.append([KeyboardButton(f"ÿ¨ÿπŸÑ {cat[1]} ŸÖŸÖŸäÿ≤")])
            keyboard.append([KeyboardButton("üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ")])
            await update.message.reply_text("ÿßÿÆÿ™ÿ± ŸÇÿ≥ŸÖ ŸÑÿ¨ÿπŸÑŸá ŸÖŸÖŸäÿ≤:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        else:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ£ŸÇÿ≥ÿßŸÖ ÿπÿßÿØŸäÿ©.")
        return
    
    elif text == "üóë ÿ≠ÿ∞ŸÅ ŸÇÿ≥ŸÖ":
        categories = db.get_categories()
        if categories:
            keyboard = []
            for cat in categories:
                keyboard.append([KeyboardButton(f"ÿ≠ÿ∞ŸÅ {cat[1]}")])
            keyboard.append([KeyboardButton("üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ")])
            await update.message.reply_text("ÿßÿÆÿ™ÿ± ŸÇÿ≥ŸÖ ŸÑŸÑÿ≠ÿ∞ŸÅ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        else:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ£ŸÇÿ≥ÿßŸÖ.")
        return
    
    # ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ - ÿ™ŸÖ ÿ•ÿµŸÑÿßÿ≠ ÿßŸÑÿ≠ÿ∞ŸÅ Ÿàÿπÿ±ÿ∂ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ
    elif text == "‚ûï ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿ≠ÿ™ŸàŸâ":
        categories = db.get_categories()
        if not categories:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ£ŸÇÿ≥ÿßŸÖ. ÿ£ÿ∂ŸÅ ŸÇÿ≥ŸÖ ÿ£ŸàŸÑÿßŸã.")
            return
        
        context.user_data['adding_content'] = True
        context.user_data['content_stage'] = 'type'
        
        keyboard = [
            [KeyboardButton("üìù ŸÜÿµ"), KeyboardButton("üì∏ ÿµŸàÿ±ÿ©")],
            [KeyboardButton("üé• ŸÅŸäÿØŸäŸà"), KeyboardButton("üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ")]
        ]
        await update.message.reply_text("üìù ÿ®ÿØÿ° ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿ≠ÿ™ŸàŸâ ÿ¨ÿØŸäÿØ\n\nÿßÿÆÿ™ÿ± ŸÜŸàÿπ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return
    
    elif text in ["üìù ŸÜÿµ", "üì∏ ÿµŸàÿ±ÿ©", "üé• ŸÅŸäÿØŸäŸà"] and context.user_data.get('content_stage') == 'type':
        content_type_map = {"üìù ŸÜÿµ": "text", "üì∏ ÿµŸàÿ±ÿ©": "photo", "üé• ŸÅŸäÿØŸäŸà": "video"}
        context.user_data['content_type'] = content_type_map[text]
        context.user_data['content_stage'] = 'title'
        
        await update.message.reply_text("‚úèÔ∏è ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 1 ŸÖŸÜ 3\n\nÿ£ÿ±ÿ≥ŸÑ ÿπŸÜŸàÿßŸÜ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ (ŸÖÿ´ÿßŸÑ: ŸÇÿµÿ© ÿ¨ŸÖŸäŸÑÿ©ÿå ŸÅŸäÿØŸäŸà ÿ±ÿßÿ¶ÿπÿå ÿ•ŸÑÿÆ):")
        return
    
    elif text == "üìã ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ":
        content_items = db.get_all_content()
        if content_items:
            content_text = "üì¶ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ≠ÿ™ŸàŸäÿßÿ™:\n\n"
            for content in content_items:
                content_type_icon = "üìù" if content[3] == 'text' else "üì∏" if content[3] == 'photo' else "üé•"
                premium_status = "üëë" if content[5] == 1 else "‚≠ê"
                content_text += f"{content_type_icon}{premium_status} {content[1]} - {content[7]}\n"
            await update.message.reply_text(content_text)
        else:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≠ÿ™ŸàŸâ.")
        return
    
    elif text == "üîß ÿ¨ÿπŸÑ ŸÖÿ≠ÿ™ŸàŸâ ŸÖŸÖŸäÿ≤":
        content_items = db.get_all_content()
        normal_content = [c for c in content_items if c[5] == 0]
        if normal_content:
            keyboard = []
            for content in normal_content[:10]:
                keyboard.append([KeyboardButton(f"ÿ™ŸÖŸäŸäÿ≤ {content[1]}")])
            keyboard.append([KeyboardButton("üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ")])
            await update.message.reply_text("ÿßÿÆÿ™ÿ± ŸÖÿ≠ÿ™ŸàŸâ ŸÑÿ¨ÿπŸÑŸá ŸÖŸÖŸäÿ≤:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        else:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≠ÿ™ŸàŸâ ÿπÿßÿØŸä.")
        return
    
    elif text == "üóë ÿ≠ÿ∞ŸÅ ŸÖÿ≠ÿ™ŸàŸâ":
        content_items = db.get_all_content()
        if content_items:
            keyboard = []
            for content in content_items[:10]:
                keyboard.append([KeyboardButton(f"ÿ≠ÿ∞ŸÅ {content[1]}")])
            keyboard.append([KeyboardButton("üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ")])
            await update.message.reply_text("ÿßÿÆÿ™ÿ± ŸÖÿ≠ÿ™ŸàŸâ ŸÑŸÑÿ≠ÿ∞ŸÅ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        else:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≠ÿ™ŸàŸâ.")
        return
    
    # ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ - ÿ™ŸÖ ÿ•ÿµŸÑÿßÿ≠ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™
    elif text == "üëë ÿπÿ±ÿ∂ ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ":
        premium_users = db.get_premium_users()
        if premium_users:
            users_text = "üëë ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸàŸÜ ÿßŸÑŸÖŸÖŸäÿ≤ŸàŸÜ:\n\n"
            for user_data in premium_users:
                users_text += f"üÜî {user_data[0]} - üë§ {user_data[2]} - üìÖ {user_data[7].split()[0] if user_data[7] else 'ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ'}\n"
            await update.message.reply_text(users_text)
        else:
            await update.message.reply_text("‚ö†Ô∏è ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ŸÖŸÖŸäÿ≤ŸäŸÜ.")
        return
    
    elif text == "üìä ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ":
        premium_users = db.get_premium_users()
        total_users = len(db.get_all_users())
        
        stats_text = f"üíé ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ:\n\n"
        stats_text += f"üëë ÿπÿØÿØ ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ: {len(premium_users)}\n"
        stats_text += f"üë• ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ: {total_users}\n"
        stats_text += f"üìà ŸÜÿ≥ÿ®ÿ© ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ: {(len(premium_users)/total_users*100) if total_users > 0 else 0:.1f}%"
        
        await update.message.reply_text(stats_text)
        return
    
    elif text == "‚úèÔ∏è ÿ™ÿπÿØŸäŸÑ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ":
        current = db.get_setting('premium_access_message')
        await update.message.reply_text(f"ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©:\n{current}\n\nÿ£ÿ±ÿ≥ŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©:")
        context.user_data['editing_premium_message'] = True
        return
    
    elif text == "üéØ ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ":
        current_message = db.get_setting('premium_access_message')
        await update.message.reply_text(f"üéØ ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ\n\nÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ ÿßŸÑÿ≠ÿßŸÑŸäÿ©:\n{current_message}\n\nÿ£ÿ±ÿ≥ŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©:")
        context.user_data['editing_premium_message'] = True
        return
    
    # ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™
    elif text == "‚úèÔ∏è ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ™ÿ±ÿ≠Ÿäÿ®":
        current = db.get_setting('welcome_message')
        await update.message.reply_text(f"ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©:\n{current}\n\nÿ£ÿ±ÿ≥ŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©:")
        context.user_data['editing_welcome'] = True
        return
    
    elif text == "üìù ÿ≠ŸàŸÑ ÿßŸÑÿ®Ÿàÿ™":
        current = db.get_setting('about_text')
        await update.message.reply_text(f"ÿßŸÑŸÜÿµ ÿßŸÑÿ≠ÿßŸÑŸä:\n{current}\n\nÿ£ÿ±ÿ≥ŸÑ ÿßŸÑŸÜÿµ ÿßŸÑÿ¨ÿØŸäÿØ:")
        context.user_data['editing_about'] = True
        return
    
    elif text == "üìû ÿßÿ™ÿµŸÑ ÿ®ŸÜÿß":
        current = db.get_setting('contact_text')
        await update.message.reply_text(f"ÿßŸÑŸÜÿµ ÿßŸÑÿ≠ÿßŸÑŸä:\n{current}\n\nÿ£ÿ±ÿ≥ŸÑ ÿßŸÑŸÜÿµ ÿßŸÑÿ¨ÿØŸäÿØ:")
        context.user_data['editing_contact'] = True
        return
    
    elif text == "üîÑ ÿ≤ÿ± ÿßŸÑÿ®ÿØÿ°":
        current = db.get_setting('start_button_text')
        await update.message.reply_text(f"ÿßŸÑŸÜÿµ ÿßŸÑÿ≠ÿßŸÑŸä: {current}\n\nÿ£ÿ±ÿ≥ŸÑ ÿßŸÑŸÜÿµ ÿßŸÑÿ¨ÿØŸäÿØ ŸÑÿ≤ÿ± ÿßŸÑÿ®ÿØÿ°:")
        context.user_data['editing_start_button'] = True
        return
    
    elif text == "‚úèÔ∏è ÿßÿ≥ŸÖ ŸÇÿ≥ŸÖ ÿßŸÑŸÖŸÖŸäÿ≤":
        current = db.get_setting('premium_section_name')
        await update.message.reply_text(f"ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿ≠ÿßŸÑŸä: {current}\n\nÿ£ÿ±ÿ≥ŸÑ ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿ¨ÿØŸäÿØ:")
        context.user_data['editing_premium_section_name'] = True
        return
    
    elif text == "üîê ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖŸàÿßŸÅŸÇÿ©":
        current = db.get_setting('approval_required')
        new_status = '0' if current == '1' else '1'
        db.update_setting('approval_required', new_status)
        status = "ŸÖÿπÿ∑ŸÑ" if new_status == '0' else "ŸÖŸÅÿπŸÑ"
        await update.message.reply_text(f"‚úÖ ÿ™ŸÖ {status} ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖŸàÿßŸÅŸÇÿ©")
        return
    
    # ŸÖÿπÿßŸÑÿ¨ÿ© ŸÖÿ±ÿßÿ≠ŸÑ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ
    elif context.user_data.get('content_stage') == 'title':
        context.user_data['content_title'] = text
        context.user_data['content_stage'] = 'content'
        
        content_type = context.user_data.get('content_type')
        if content_type == 'text':
            await update.message.reply_text("üìù ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 2 ŸÖŸÜ 3\n\nÿ£ÿ±ÿ≥ŸÑ ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÜÿµ:")
        else:
            type_name = "ÿµŸàÿ±ÿ©" if content_type == 'photo' else "ŸÅŸäÿØŸäŸà"
            await update.message.reply_text(f"üì∏ ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 2 ŸÖŸÜ 3\n\nÿ£ÿ±ÿ≥ŸÑ {type_name} ÿßŸÑÿ¢ŸÜ:")
        return
    
    elif context.user_data.get('content_stage') == 'content':
        if context.user_data.get('content_type') == 'text':
            context.user_data['content_description'] = text
            context.user_data['content_stage'] = 'category'
            
            categories = db.get_categories()
            keyboard = []
            for cat in categories:
                premium_status = "üëë" if cat[2] == 1 else "‚≠ê"
                keyboard.append([KeyboardButton(f"{premium_status} {cat[1]}")])
            keyboard.append([KeyboardButton("üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ")])
            
            await update.message.reply_text(
                "üìÅ ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 3 ŸÖŸÜ 3\n\nÿßÿÆÿ™ÿ± ÿßŸÑŸÇÿ≥ŸÖ ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿ•ŸÑŸäŸá:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        return
    
    elif context.user_data.get('content_stage') == 'category':
        category_text = text
        if text.startswith("üëë ") or text.startswith("‚≠ê "):
            category_name = text[2:]
        else:
            category_name = text
            
        category_id = get_category_id_by_name(category_name)
        if category_id:
            keyboard = [
                [KeyboardButton("‚úÖ ŸÜÿπŸÖÿå ÿ¨ÿπŸÑŸá ŸÖŸÖŸäÿ≤"), KeyboardButton("‚ùå ŸÑÿßÿå ŸÖÿ≠ÿ™ŸàŸâ ÿπÿßÿØŸä")],
                [KeyboardButton("üîô ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ")]
            ]
            
            context.user_data['content_category_id'] = category_id
            context.user_data['content_stage'] = 'premium_choice'
            
            await update.message.reply_text(
                f"üéØ ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑŸÜŸáÿßÿ¶Ÿäÿ©\n\nŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ¨ÿπŸÑ Ÿáÿ∞ÿß ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ŸÖŸÖŸäÿ≤ÿßŸãÿü\n\nÿßŸÑÿπŸÜŸàÿßŸÜ: {context.user_data.get('content_title', 'ÿ®ÿØŸàŸÜ ÿπŸÜŸàÿßŸÜ')}\nÿßŸÑŸÇÿ≥ŸÖ: {category_name}",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        else:
            await update.message.reply_text("‚ùå ŸÇÿ≥ŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ. ÿßŸÑÿ±ÿ¨ÿßÿ° ÿßÿÆÿ™Ÿäÿßÿ± ŸÇÿ≥ŸÖ ŸÖŸÜ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©.")
        return
    
    elif context.user_data.get('content_stage') == 'premium_choice':
        if text == "‚úÖ ŸÜÿπŸÖÿå ÿ¨ÿπŸÑŸá ŸÖŸÖŸäÿ≤":
            is_premium = True
        elif text == "‚ùå ŸÑÿßÿå ŸÖÿ≠ÿ™ŸàŸâ ÿπÿßÿØŸä":
            is_premium = False
        else:
            await update.message.reply_text("‚ùå ÿßŸÑÿ±ÿ¨ÿßÿ° ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ± ŸÖŸÜ ÿßŸÑÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©.")
            return
        
        title = context.user_data.get('content_title', 'ÿ®ÿØŸàŸÜ ÿπŸÜŸàÿßŸÜ')
        content_type = context.user_data.get('content_type', 'text')
        description = context.user_data.get('content_description', '')
        category_id = context.user_data.get('content_category_id')
        file_id = context.user_data.get('content_file_id')
        
        db.add_content(title, description, content_type, category_id, is_premium, file_id)
        
        status = "ŸÖŸÖŸäÿ≤ üëë" if is_premium else "ÿπÿßÿØŸä ‚≠ê"
        content_type_name = "ŸÜÿµ" if content_type == 'text' else "ÿµŸàÿ±ÿ©" if content_type == 'photo' else "ŸÅŸäÿØŸäŸà"
        
        await update.message.reply_text(
            f"‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿ®ŸÜÿ¨ÿßÿ≠!\n\n"
            f"üìù ÿßŸÑŸÜŸàÿπ: {content_type_name}\n"
            f"üéØ ÿßŸÑÿπŸÜŸàÿßŸÜ: {title}\n"
            f"üìÅ ÿßŸÑŸÇÿ≥ŸÖ: {get_category_name_by_id(category_id)}\n"
            f"üíé ÿßŸÑÿ≠ÿßŸÑÿ©: {status}",
            reply_markup=admin_content_menu()
        )
        context.user_data.clear()
        return
    
    # ŸÖÿπÿßŸÑÿ¨ÿ© ÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ£ÿÆÿ±Ÿâ
    elif context.user_data.get('awaiting_premium_user'):
        try:
            target_user_id = int(text)
            db.make_premium(target_user_id)
            await update.message.reply_text(f"‚úÖ ÿ™ŸÖ ÿ™ÿ±ŸÇŸäÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ {target_user_id} ÿ•ŸÑŸâ ŸÖŸÖŸäÿ≤", reply_markup=admin_users_menu())
        except:
            await update.message.reply_text("‚ùå ID ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠", reply_markup=admin_users_menu())
        context.user_data.clear()
        return
    
    elif context.user_data.get('awaiting_remove_premium'):
        try:
            target_user_id = int(text)
            db.remove_premium(target_user_id)
            await update.message.reply_text(f"‚úÖ ÿ™ŸÖ ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ™ŸÖŸäÿ≤ ŸÖŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ {target_user_id}", reply_markup=admin_users_menu())
        except:
            await update.message.reply_text("‚ùå ID ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠", reply_markup=admin_users_menu())
        context.user_data.clear()
        return
    
    elif context.user_data.get('awaiting_user_delete'):
        try:
            target_user_id = int(text)
            db.delete_user(target_user_id)
            await update.message.reply_text(f"‚úÖ ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ {target_user_id}", reply_markup=admin_users_menu())
        except:
            await update.message.reply_text("‚ùå ID ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠", reply_markup=admin_users_menu())
        context.user_data.clear()
        return
    
    elif context.user_data.get('adding_category'):
        db.add_category(text)
        await update.message.reply_text(f"‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÇÿ≥ŸÖ: {text}", reply_markup=admin_categories_menu())
        context.user_data.clear()
        return
    
    elif context.user_data.get('awaiting_new_category_name'):
        category_id = context.user_data.get('editing_category_id')
        old_name = context.user_data.get('editing_category_name')
        if category_id:
            db.update_category(category_id, text, 0)
            await update.message.reply_text(f"‚úÖ ÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÇÿ≥ŸÖ ŸÖŸÜ '{old_name}' ÿ•ŸÑŸâ '{text}'", reply_markup=admin_categories_menu())
        context.user_data.clear()
        return
    
    elif context.user_data.get('editing_premium_message'):
        db.update_setting('premium_access_message', text)
        await update.message.reply_text("‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖŸÖŸäÿ≤ŸäŸÜ", reply_markup=admin_settings_menu())
        context.user_data.clear()
        return
    
    elif context.user_data.get('editing_welcome'):
        db.update_setting('welcome_message', text)
        await update.message.reply_text("‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ™ÿ±ÿ≠Ÿäÿ®", reply_markup=admin_settings_menu())
        context.user_data.clear()
        return
    
    elif context.user_data.get('editing_about'):
        db.update_setting('about_text', text)
        await update.message.reply_text("‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿ≠ŸàŸÑ ÿßŸÑÿ®Ÿàÿ™", reply_markup=admin_settings_menu())
        context.user_data.clear()
        return
    
    elif context.user_data.get('editing_contact'):
        db.update_setting('contact_text', text)
        await update.message.reply_text("‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßÿ™ÿµŸÑ ÿ®ŸÜÿß", reply_markup=admin_settings_menu())
        context.user_data.clear()
        return
    
    elif context.user_data.get('editing_start_button'):
        db.update_setting('start_button_text', text)
        await update.message.reply_text("‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿ≤ÿ± ÿßŸÑÿ®ÿØÿ°", reply_markup=admin_settings_menu())
        context.user_data.clear()
        return
    
    elif context.user_data.get('editing_premium_section_name'):
        db.update_setting('premium_section_name', text)
        await update.message.reply_text(f"‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßÿ≥ŸÖ ŸÇÿ≥ŸÖ ÿßŸÑŸÖŸÖŸäÿ≤ ÿ•ŸÑŸâ: {text}", reply_markup=admin_settings_menu())
        context.user_data.clear()
        return
    
    elif context.user_data.get('broadcasting'):
        users = db.get_all_users()
        success = 0
        for user_data in users:
            try:
                await context.bot.send_message(
                    chat_id=user_data[0], 
                    text=f"üì¢ ÿ•ÿ¥ÿπÿßÿ± ŸÖŸÜ ÿßŸÑÿ•ÿØÿßÿ±ÿ©:\n\n{text}"
                )
                success += 1
            except:
                continue
        await update.message.reply_text(f"‚úÖ ÿ™ŸÖ ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ ÿ•ŸÑŸâ {success} ŸÖÿ≥ÿ™ÿÆÿØŸÖ", reply_markup=admin_main_menu())
        context.user_data.clear()
        return
    
    # ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿÆÿßÿµÿ© - ÿ™ŸÖ ÿ•ÿµŸÑÿßÿ≠ ÿ¨ŸÖŸäÿπ ŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑÿ≠ÿ∞ŸÅ
    elif text.startswith("ÿ¨ÿπŸÑ "):
        if text.endswith(" ŸÖŸÖŸäÿ≤"):
            category_name = text[4:-5]
            category_id = get_category_id_by_name(category_name)
            if category_id:
                db.update_category(category_id, category_name, 1)
                await update.message.reply_text(f"‚úÖ ÿ™ŸÖ ÿ¨ÿπŸÑ ÿßŸÑŸÇÿ≥ŸÖ {category_name} ŸÖŸÖŸäÿ≤", reply_markup=admin_categories_menu())
            else:
                await update.message.reply_text("‚ùå ŸÇÿ≥ŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ")
        return
    
    elif text.startswith("ÿ™ŸÖŸäŸäÿ≤ "):
        content_title = text[7:]
        all_content = db.get_all_content()
        content_found = False
        for content in all_content:
            if content[1].startswith(content_title):
                db.conn.execute('UPDATE content SET is_premium = 1 WHERE id = ?', (content[0],))
                db.conn.commit()
                await update.message.reply_text(f"‚úÖ ÿ™ŸÖ ÿ¨ÿπŸÑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ {content[1]} ŸÖŸÖŸäÿ≤", reply_markup=admin_content_menu())
                content_found = True
                break
        
        if not content_found:
            await update.message.reply_text("‚ùå ŸÖÿ≠ÿ™ŸàŸâ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ")
        return
    
    elif text.startswith("ÿ≠ÿ∞ŸÅ "):
        # ÿ≠ÿ∞ŸÅ ŸÇÿ≥ŸÖ
        category_name = text[5:]
        category_id = get_category_id_by_name(category_name)
        if category_id:
            db.delete_category(category_id)
            await update.message.reply_text(f"‚úÖ ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÇÿ≥ŸÖ: {category_name}", reply_markup=admin_categories_menu())
            return
        
        # ÿ≠ÿ∞ŸÅ ŸÖÿ≠ÿ™ŸàŸâ
        all_content = db.get_all_content()
        content_found = False
        for content in all_content:
            if content[1].startswith(category_name):
                db.delete_content(content[0])
                await update.message.reply_text(f"‚úÖ ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ: {content[1]}", reply_markup=admin_content_menu())
                content_found = True
                break
        
        if not content_found:
            await update.message.reply_text("‚ùå ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ")
        return
    
    else:
        await update.message.reply_text("üëë ŸÑŸàÿ≠ÿ© ÿ™ÿ≠ŸÉŸÖ ÿßŸÑŸÖÿØŸäÿ±", reply_markup=admin_main_menu())

# ÿØŸàÿßŸÑ ŸÖÿ≥ÿßÿπÿØÿ©
async def show_statistics(update: Update, context: CallbackContext):
    total_users = len(db.get_all_users())
    active_users = len(db.get_active_users(30))
    premium_users = len(db.get_premium_users())
    total_content = len(db.get_all_content())
    total_categories = len(db.get_categories())
    premium_categories = len(db.get_premium_categories())
    
    stats_text = f"üìä ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑÿ®Ÿàÿ™:\n\n"
    stats_text += f"üë• ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸàŸÜ: {total_users}\n"
    stats_text += f"üéØ ÿßŸÑŸÜÿ¥ÿ∑ŸàŸÜ: {active_users}\n"
    stats_text += f"üíé ÿßŸÑŸÖŸÖŸäÿ≤ŸàŸÜ: {premium_users}\n"
    stats_text += f"üì¶ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ: {total_content}\n"
    stats_text += f"üìÅ ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ: {total_categories}\n"
    stats_text += f"üëë ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ ÿßŸÑŸÖŸÖŸäÿ≤ÿ©: {premium_categories}"
    
    await update.message.reply_text(stats_text)

async def error_handler(update: Update, context: CallbackContext) -> None:
    logger.error(f"ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£: {context.error}")

def main():
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        raise ValueError("‚ùå ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿπŸäŸäŸÜ TELEGRAM_BOT_TOKEN")
    
    application = Application.builder().token(token).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, handle_media))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_error_handler(error_handler)
    
    logger.info("üöÄ ÿ®ÿØÿ° ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ®Ÿàÿ™ ÿßŸÑŸÖÿ≠ÿ≥ŸÜ...")
    application.run_polling()

if __name__ == '__main__':
    main()
